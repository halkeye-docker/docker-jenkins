---
unclassified:
  globalLibraries:
    libraries:
      - name: "github.com/halkeye/jenkins-shared-library"
        retriever:
          modernSCM:
            scm:
              git:
                remote: "https://github.com/halkeye/jenkins-shared-library"
jobs:
  - script: >
      def githubProjects = new groovy.json.JsonSlurper().parse(
        (new URL("https://raw.githubusercontent.com/halkeye/jenkins-jobs/master/github_projects.json")).newReader()
      );
      def bitbucketProjects = new groovy.json.JsonSlurper().parse(
        (new URL("https://raw.githubusercontent.com/halkeye/jenkins-jobs/master/bitbucket_projects.json")).newReader()
      );
      def githubOrgs = new groovy.json.JsonSlurper().parse(
        (new URL("https://raw.githubusercontent.com/halkeye/jenkins-jobs/master/github_orgs.json")).newReader()
      );

      folder("github_projects") {
        authorization {
          ["nfg", "aliaoca", "authorized", "authenticated"].each { user ->
            permission("hudson.model.Item.Read", user)
            permission("hudson.model.Item.Discover", user)
          }
        }
        displayName("Github Projects")
        description("All the github projects")
      }

      folder("github_orgs") {
        authorization {
          ["nfg", "aliaoca", "authorized", "authenticated"].each { user ->
            permission("hudson.model.Item.Read", user)
            permission("hudson.model.Item.Discover", user)
          }
        }
        displayName("Github Organization Projects")
        description("")
      }

      folder("bitbucket_projects") {
        displayName("Bitbucket Projects")
        description("All the bitbucket projects")
      }

      githubProjects.keySet().each { username ->
        githubProjects[username].each { slug ->
          multibranchPipelineJob("github_projects/" + username + "_" + slug) {
            branchSources {
              github {
                scanCredentialsId("github-halkeye")
                repoOwner(username)
                repository(slug)
              }
            }
            orphanedItemStrategy {
              discardOldItems {
                numToKeep(5)
              }
            }
          }
        }
      }

      bitbucketProjects.keySet().each { username ->
        bitbucketProjects[username].each { slug ->
          multibranchPipelineJob("bitbucket_projects/" + username + "_" + slug) {
            configure {
              it / sources / data / 'jenkins.branch.BranchSource' / source(class: 'com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource') {
                credentialsId('bitbucket-halkeye')
                repoOwner(username)
                repository(slug)
              }
            }
            orphanedItemStrategy {
              discardOldItems {
                numToKeep(5)
              }
            }
          }
        }
      }

      githubOrgs.each { slug ->
        organizationFolder("github_orgs/" + slug) {
          orphanedItemStrategy {
            discardOldItems {
              numToKeep(5)
            }
          }
          configure {
            it / navigators / "org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator" << {
                repoOwner(slug)
                credentialsId("github-halkeye")
            }
          }
          configure {
            def traits = it / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits
            traits << 'org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait' {
                strategyId 1
            }
            traits << 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait' {
                strategyId 2
                trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
            }
            traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                strategyId 2
            }
            traits << 'org.jenkinsci.plugins.github__branch__source.TagDiscoveryTrait' {

            }
          }
        }
      }
